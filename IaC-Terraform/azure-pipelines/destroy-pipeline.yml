variables:
  resource_group_name: $[ variables['resource_group_name'] ]
  storage_account_name: $[ variables['storage_account_name'] ]
  container_name: $[ variables['container_name'] ]

trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

steps:

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  displayName: 'Initialize Terraform'
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/IaC-Terraform'
    command: 'init'
    backendServiceArm: 'skd-Cloud-Service-Connection'
    backendAzureRmResourceGroupName: $(resource_group_name)
    backendAzureRmStorageAccountName: $(storage_account_name)
    backendAzureRmContainerName: $(Your-Container)
    backendAzureRmKey: 'terraform.tfstate'

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  displayName: 'Validate Terraform Configuration'
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/IaC-Terraform'
    command: 'validate'

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  displayName: 'Generate Terraform Plan'
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/IaC-Terraform'
    command: 'plan'
    environmentServiceNameAzureRM: 'skd-Cloud-Service-Connection'

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  displayName: 'Terraform Plan for Destruction'
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/IaC-Terraform'
    command: 'destroy'
    environmentServiceNameAzureRM: 'skd-Cloud-Service-Connection'
    backendAzureRmStorageAccountName: $(storage_account_name)
    backendAzureRmContainerName: $(container_name)
    backendAzureRmKey: 'terraform.tfstate'
    commandOptions: '-auto-approve'