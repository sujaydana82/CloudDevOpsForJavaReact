trigger:
  none

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: 'terraform-variables'

stages:
- stage: Cleanup-Dev
  jobs:
  - job: DestroyResources
    displayName: 'Destroy Resources'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true

    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest'

    - checkout: self

    - task: TerraformTaskV2@2
      displayName: 'Terraform Init'
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/IaC-Terraform'
        backendServiceArm: '$(service-connection)'
        backendAzureRmResourceGroupName: '$(resource_group_name)'
        backendAzureRmStorageAccountName: '$(storage_account_name)'
        backendAzureRmContainerName: '$(container_name)'
        backendAzureRmKey: '$(backendkey)'
     

    - task: TerraformTaskV1@0
      displayName: 'Terraform Validate'
      inputs:
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/IaC-Terraform'
        environmentServiceNameAzureRM: '$(service-connection)'

    - task: TerraformTaskV1@0
      displayName: 'Terraform Plan'
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/IaC-Terraform'
        environmentServiceNameAzureRM: '$(service-connection)'
        commandOptions: '-var-file=dev.tfvars'   

    - task: TerraformTaskV1@0
      displayName: 'Terraform Destroy'
      inputs:
        command: 'Destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/IaC-Terraform'
        environmentServiceNameAzureRM: '$(service-connection)'
        commandOptions: '-auto-approve -var-file=dev.tfvars'