trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

steps:

- task: AzureCLI@2
  inputs:
    azureSubscription: 'skd-Cloud-Service-Connection'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      RG_NAME="1-628addcf-playground-sandbox"
      RG_EXISTS=$(az group exists --name $RG_NAME)
      if [ "$RG_EXISTS" == "true" ]
      then
        echo "Resource group $RG_NAME exists. Importing to Terraform state..."
        terraform import azurerm_resource_group.rg /subscriptions/0cfe2870-d256-4119-b0a3-16293ac11bdc/resourceGroups/$RG_NAME

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/IaC-Terraform'
    command: 'init'
    backendServiceArm: 'skd-Cloud-Service-Connection'
    backendAzureRmResourceGroupName: $(Your-Resource-Group)
    backendAzureRmStorageAccountName: $(Your-Storage-Account)
    backendAzureRmContainerName: $(Your-Container)
    backendAzureRmKey: 'terraform.tfstate'

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/IaC-Terraform'
    command: 'validate'

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/IaC-Terraform'
    command: 'plan'
    environmentServiceNameAzureRM: 'skd-Cloud-Service-Connection'

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/IaC-Terraform'
    command: 'apply'
    environmentServiceNameAzureRM: 'skd-Cloud-Service-Connection'
    commandOptions: '-auto-approve'
