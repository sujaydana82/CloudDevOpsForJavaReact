variables:
  resource_group_name: $[ variables['resource_group_name'] ]
  storage_account_name: $[ variables['storage_account_name'] ]
  container_name: $[ variables['container_name'] ]

trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    # Import existing Azure resources into Terraform state
    terraform -chdir=/home/vsts/work/1/s import azurerm_container_registry.acr /subscriptions/80ea84e8-afce-4851-928a-9e2219724c69/resourceGroups/1-fb9bbcf4-playground-sandbox/providers/Microsoft.ContainerRegistry/registries/skdContainerRegistry
    terraform -chdir=/home/vsts/work/1/s import azurerm_service_plan.plan /subscriptions/80ea84e8-afce-4851-928a-9e2219724c69/resourceGroups/1-fb9bbcf4-playground-sandbox/providers/Microsoft.Web/serverFarms/skdAppServicePlan
    terraform -chdir=/home/vsts/work/1/s import azurerm_mssql_server.example /subscriptions/80ea84e8-afce-4851-928a-9e2219724c69/resourceGroups/1-fb9bbcf4-playground-sandbox/providers/Microsoft.Sql/servers/skd-sqlserver
  displayName: 'Import existing Azure resources into Terraform state'

- script: |
    # Initialize Terraform
    terraform init

    # Apply Terraform configuration
    terraform apply -auto-approve
  displayName: 'Terraform Init and Apply'


#steps:

# - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
#   displayName: 'Initialize Terraform'
#   inputs:
#     workingDirectory: '$(System.DefaultWorkingDirectory)/IaC-Terraform'
#     command: 'init'
#     backendServiceArm: 'skd-Cloud-Service-Connection'
#     backendAzureRmResourceGroupName: $(resource_group_name)
#     backendAzureRmStorageAccountName: $(storage_account_name)
#     backendAzureRmContainerName: $(container_name)
#     backendAzureRmKey: 'terraform.tfstate'

# - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
#   displayName: 'Validate Terraform Configuration'
#   inputs:
#     workingDirectory: '$(System.DefaultWorkingDirectory)/IaC-Terraform'
#     command: 'validate'

# - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
#   displayName: 'Generate Terraform Plan'
#   inputs:
#     workingDirectory: '$(System.DefaultWorkingDirectory)/IaC-Terraform'
#     command: 'plan'
#     environmentServiceNameAzureRM: 'skd-Cloud-Service-Connection'

# - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
#   displayName: 'Apply Terraform Plan'
#   inputs:
#     workingDirectory: '$(System.DefaultWorkingDirectory)/IaC-Terraform'
#     command: 'apply'
#     environmentServiceNameAzureRM: 'skd-Cloud-Service-Connection'
#     commandOptions: '-auto-approve'